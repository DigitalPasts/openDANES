[
  
    
    
    {
      "title"    : "Online Resources for Digital Ancient Near Eastern Studies",
      "authors" : "",
      "tags"     : "navigation bar",
      "url"      : "/openDANES/nav/DANES-resources.html",
      "date"     : "",
      "type"     : "nav",
      "summary"     : "",
      "content"     : "The following provides a list of digital, online resources for studying the ancient Near East.While this list is meant to be comprehensive, please contact us to let us know if anything is missed!Databases(list of databases…)Projects(list of projects…)Repositories(list of repositories…)",
      "snippet"     : "The following provides a list of digital, online resources for studying the ancient Near East.While this list is meant to be comprehensive, please contact us to let us know if anything is missed!Da..."
    } ,
  
    
    
    {
      "title"    : "About openDANES",
      "authors" : "",
      "tags"     : "navigation bar",
      "url"      : "/openDANES/nav/about.html",
      "date"     : "",
      "type"     : "nav",
      "summary"     : "",
      "content"     : "openDANES is a platform for tutorials and white papers about using computational methodologies for ancient Near Eastern studies.",
      "snippet"     : "openDANES is a platform for tutorials and white papers about using computational methodologies for ancient Near Eastern studies."
    } ,
  
    
    
    {
      "title"    : "Open Digital Ancient Near Eastern Studies",
      "authors" : "",
      "tags"     : "navigation bar",
      "url"      : "/openDANES/",
      "date"     : "",
      "type"     : "nav",
      "summary"     : "",
      "content"     : "",
      "snippet"     : ""
    } ,
  
    
    
    {
      "title"    : "Preprocessing Ancient Texts - Challenges and Comparisons of Python and R Resources",
      "authors" : "chatGPT",
      "tags"     : "python, R, pre-processing",
      "url"      : "/openDANES/pages/paper1.html",
      "date"     : "",
      "type"     : "white-paper",
      "summary"     : "This is an example paper created by chatGPT.",
      "content"     : "                                chatGPT                                                                                      1                                                                                                                           1 openAI            Submitted on: April 07, 2023    Published on: April 07, 2023          Peer reviewed: April 07, 2023                              Reviewed by: chatGPT                                                            doi                                            This is an example paper created by chatGPT.                      #python              #R              #pre-processing              About this paperAll the text contained in this paper, except for this section, was created by chatGPT. It was generated by the following prompt:  We are developing a website called openDANES, a platform for tutorials and white papers about using computational methodologies for ancient Near Eastern studies.  Can you write an example white paper that will include all possible markdown syntax? (different heading types, tip prompts, images, etc.). This will be used as a template example.  The example white paper should be about current challenges in preprocessing ancient texts using available online resources, particularly comparing current resources in python versus current resources in R.  As this is a demo, please include jokes to make it funny and entertaining!Then, for the peer-review process, a new conversation with chatGPT was started where the following prompt was given:  I need you to perform an academic peer review for a white paper submitted to openDANES, a platform for tutorials and white papers about using computational methodologies for ancient Near Eastern studies.  Please critically answer the following questions:      should the paper be published in openDANES?    are there any corrections you would suggest to the text, which would make it clearer or strengthen the points the author is making? Please write them out.    are the jokes funny enough? If not, can you improve them?  Then the original version of this paper was copy-pasted.ChatGPT provided the following answers:  Overall, the paper is well-written, informative, and engaging. It addresses an important and timely topic, and provides a useful comparison of Python and R resources for preprocessing ancient texts. Below are my answers to the three questions posed:  (1) Yes, the paper should be published in openDANES. It meets the platform’s criteria of providing tutorials and white papers about using computational methodologies for ancient Near Eastern studies.  (2) There are no major corrections that I would suggest. However, I have a few minor suggestions that may strengthen the points the author is making:      The introduction could benefit from a more specific statement of the problem or research question that the paper addresses.    In the Python section, the author mentions sentiment analysis and questions its usefulness for ancient texts. It may be helpful to provide an example or explanation of why this is the case.    In the R section, the author could expand on the benefits of the tidytext and quanteda packages. What specific features or functionalities do these packages offer?    (3) The jokes are light-hearted and add to the overall tone of the paper. I don’t think they detract from the content, and therefore don’t need to be improved.  Overall, the paper is a valuable contribution to the field of ancient Near Eastern studies and computational methodologies.Then, we asked chatGPT to rewrite the paper with the suggested corrections. The text below is the result of that peer-review.The text has not been adapted whatsoever by a human. This is purely meant as an example of how a formatted paper looks like.Preprocessing Ancient Texts: Challenges and Comparisons of Python and R ResourcesIntroductionAs the field of ancient Near Eastern studies becomes increasingly reliant on computational methodologies, scholars are faced with the challenge of preprocessing ancient texts using available online resources. In this white paper, we will explore the current challenges of preprocessing ancient texts and compare the available resources in Python and R. Specifically, we aim to answer the question: which language is better for preprocessing ancient texts - Python or R?The Challenge of Preprocessing Ancient TextsPreprocessing ancient texts presents a unique set of challenges that are not encountered when working with modern texts. For one thing, ancient texts often come in a variety of languages, many of which are no longer spoken. Additionally, ancient texts may be damaged or incomplete, making them difficult to read or understand. And let’s not forget the challenge of deciphering ancient scripts!But fear not, intrepid scholars! With the help of computational methodologies, we can overcome these challenges and gain new insights into the ancient world.Python Resources for Preprocessing Ancient TextsPython has a wealth of resources available for preprocessing ancient texts, including the Natural Language Toolkit (NLTK) and the TextBlob library. These tools can be used to tokenize text and perform part-of-speech tagging. However, while Python also has the capability to perform sentiment analysis, it is unlikely to be useful for ancient texts since we have no way of knowing how the authors were feeling.Of course, as with any programming language, there are some quirks to be aware of. As the saying goes, “Python is the second-best language for everything.” But don’t let that discourage you - with a little perseverance, you can accomplish great things in Python.R Resources for Preprocessing Ancient TextsR is another popular language for preprocessing ancient texts, with resources like the tidytext package and the quanteda package. These tools can be used to perform a variety of text analysis tasks, such as word frequency analysis and topic modeling.The tidytext package offers functionality for performing sentiment analysis specifically for texts in English, which may be useful for some ancient texts written in English. The quanteda package provides a variety of text processing and analysis functionalities, including tokenization, part-of-speech tagging, and keyword extraction. It also offers support for many different languages and scripts.However, R has its own quirks and challenges. As one wise person once said, “R is like a drug. Once you start using it, you can’t stop.” So be careful when delving into the world of R - you may find yourself unable to escape!Comparing Python and R ResourcesAs we have seen, both Python and R offer valuable resources for preprocessing ancient texts. Which language is better for this task ultimately depends on your specific needs and preferences. Python may be more intuitive for those who are new to programming, while R may be better suited for those who are already familiar with statistics and data analysis.ConclusionIn conclusion, preprocessing ancient texts presents a unique set of challenges, but with the help of computational methodologies, we can overcome these challenges and gain new insights into the ancient world. Python and R both have their own strengths and quirks, so the best choice depends on your specific needs and preferences.And remember, when in doubt, just keep laughing - because as the great scholar Confucius once said, “Everything has beauty, but not everyone sees it.”",
      "snippet"     : "                                chatGPT                                                                                      1                                                                       ..."
    } ,
  
    
    
    {
      "title"    : "Posters",
      "authors" : "",
      "tags"     : "navigation bar",
      "url"      : "/openDANES/nav/posters.html",
      "date"     : "",
      "type"     : "nav",
      "summary"     : "",
      "content"     : "A selection of posters presented in the DANES conferences!DANES 2023",
      "snippet"     : "A selection of posters presented in the DANES conferences!DANES 2023"
    } ,
  
    
    
    {
      "title"    : "",
      "authors" : "",
      "tags"     : "",
      "url"      : "/openDANES/search.json",
      "date"     : "",
      "type"     : "",
      "summary"     : "",
      "content"     : "[  {% for page in site.pages %}    {% assign author_names = ‘’ | split: ‘’ %}    {% for author in page.authors %}      {% assign author_name = author[1].name | split: “, “ %}      {% assign author_names = author_names | concat: author_name %}    {% endfor %}    {      “title”    : “{{ page.title | escape }}”,      “authors” : “{{ author_names | join: ‘, ‘ }}”,      “tags”     : “{{ page.tags | join: ‘, ‘ }}”,      “url”      : “{{ site.baseurl }}{{ page.url }}”,      “date”     : “{{ page.date }}”,      “type”     : “{{ page.type }}”,      “summary”     : “{{ page.summary }}”,      “content”     : “{{ page.content | markdownify | strip_html | strip_newlines | escape }}”,      “snippet”     : “{{ page.content | markdownify | strip_html | strip_newlines | remove_chars | escape | truncate: 200 }}”    } {% unless forloop.last %},{% endunless %}  {% endfor %}]",
      "snippet"     : "[  {% for page in site.pages %}    {% assign author_names =  | split:  %}    {% for author in page.authors %}      {% assign author_name = author[1].name | split: ,  %}      {% assign author_names ..."
    } ,
  
    
    
    {
      "title"    : "Submission Guidelines",
      "authors" : "",
      "tags"     : "navigation bar",
      "url"      : "/openDANES/nav/submission-guidelines.html",
      "date"     : "",
      "type"     : "nav",
      "summary"     : "",
      "content"     : "openDANES currently welcomes submissions for tutorials and white papers in English, but also German and Spanish.General Guidelines  style guidelines, follow X.  explanation on peer review process through hypothesis, publication, and doi.Guidelines for Tutorials  accept submissions in markdown format  link to template  this is a tip promptsome text inbetween  this is an info promptsome text inbetween  this is a warning promptsome text inbetween  this is a danger promptGuidelines for White Papers  accept submissions in markdown format or google doc  link to template",
      "snippet"     : "openDANES currently welcomes submissions for tutorials and white papers in English, but also German and Spanish.General Guidelines  style guidelines, follow X.  explanation on peer review process t..."
    } ,
  
    
    
    {
      "title"    : "Write the title of your submission here",
      "authors" : "",
      "tags"     : "tag one, tag two, tag three",
      "url"      : "/openDANES/assets/docs/submission_markdown_template.html",
      "date"     : "YYYY-MM-DD",
      "type"     : "(white-paper / tutorial)",
      "summary"     : "A 1-2 sentences summary of the content of your submission.",
      "content"     : "Types of HeadingsHeading 1It is not recommended to use heading 1 as that will automatically be the title of your submission. Please use Heading 2 and onwards.Heading 2Heading 3Heading 4Heading 5Heading 6##",
      "snippet"     : "Types of HeadingsHeading 1It is not recommended to use heading 1 as that will automatically be the title of your submission. Please use Heading 2 and onwards.Heading 2Heading 3Heading 4Heading 5Hea..."
    } ,
  
    
    
    {
      "title"    : "Preprocessing Ancient Texts with the Classical Language Toolkit (CLTK)",
      "authors" : "chatGPT",
      "tags"     : "python, CLTK, ancient Greek",
      "url"      : "/openDANES/pages/tutorial1.html",
      "date"     : "",
      "type"     : "tutorial",
      "summary"     : "This is a demo tutorial created by chatGPT.",
      "content"     : "{% include author_card.html authors=page.authors date=page.submit-date publish-date=page.publish-date peer-review-date=page.peer-review-date update-date=page.update-date tags=page.tags summary=page.summary reviewers=page.reviewers difficulty=page.difficulty doi=page.doi %}About this tutorialAll the text contained in this tutorial, except for this section, was created by chatGPT. It was generated by the following prompt:  We are developing a website called openDANES, a platform for tutorials and white papers about using computational methodologies for ancient Near Eastern studies.  Can you write a demo tutorial that will include all possible markdown syntax? (all heading types, code blocks, images, etc.). This will be used as a template example.  The demo tutorial should be about preprocessing ancient texts using the The Classical Language Toolkit (CLTK) python library.  As this is a demo, please include jokes to make it funny and entertaining!The code in this tutorial has not been validated and the text itself has not been edited only the link to the image displayed in the tutorial has been adapted to display correctly. This is purely meant as an example of how a formatted tutorial looks like.Preprocessing Ancient Texts with the Classical Language Toolkit (CLTK)Are you tired of manually preprocessing ancient texts for your research in Near Eastern studies? Fear not! The Classical Language Toolkit (CLTK) is here to help!What is CLTK?The CLTK is a Python library that provides natural language processing (NLP) tools for ancient languages, including Greek, Latin, Sanskrit, and Old English. With the CLTK, you can tokenize, lemmatize, and part-of-speech tag texts, as well as perform other common NLP tasks.Installing CLTKBefore we get started, make sure you have Python 3 installed. Then, you can install the CLTK using pip:pip install cltkLoading TextsOnce you have the CLTK installed, you can start loading texts. Let’s load the Iliad by Homer:import cltkfrom cltk.corpus.utils.importer import CorpusImportercorpus_importer = CorpusImporter(&#39;greek&#39;)corpus_importer.import_corpus(&#39;tlg&#39;) # import the TLG corpuscorpus_importer.import_corpus(&#39;phi5&#39;) # import the PHI5 corpusfrom cltk.corpus.readers import get_corpus_readerreader = get_corpus_reader(corpus_name=&#39;tlg&#39;, language=&#39;greek&#39;)iliad = reader.raw(&#39;tlg0012.tlg001&#39;) # load the IliadTokenizing TextsNow that we have the Iliad loaded, let’s tokenize it:from cltk.tokenize.word import WordTokenizertokenizer = WordTokenizer(&#39;greek&#39;)tokens = tokenizer.tokenize(iliad)Part-of-Speech TaggingWe can also perform part-of-speech tagging on the tokens:from cltk.tag.pos import POSTagtagger = POSTag(&#39;greek&#39;)tagged_tokens = tagger.tag_ngram_123_backoff(tokens)Lemmatizing TextsFinally, we can lemmatize the tokens:from cltk.lemmatize.backoff import BackoffGreekLemmatizerlemmatizer = BackoffGreekLemmatizer()lemmas = [lemmatizer.lemmatize(token) for token in tokens]And that’s it! With just a few lines of code, we’ve tokenized, part-of-speech tagged, and lemmatized an ancient Greek text. Now, go forth and preprocess with ease!  Why did the linguist break up with the CLTK? Because it kept tokenizing everything!Note: This demo tutorial used various markdown syntaxes including headers, code blocks, images, and blockquotes. Use these features to make your tutorials more organized and visually appealing. And don’t forget to add a touch of humor to keep your readers engaged!",
      "snippet"     : "{% include author_card.html authors=page.authors date=page.submit-date publish-date=page.publish-date peer-review-date=page.peer-review-date update-date=page.update-date tags=page.tags summary=page..."
    } ,
  
    
    
    {
      "title"    : "Tutorials",
      "authors" : "",
      "tags"     : "navigation bar",
      "url"      : "/openDANES/nav/tutorials.html",
      "date"     : "",
      "type"     : "nav",
      "summary"     : "",
      "content"     : "{% include tags.html type=”tutorial” %}            {% assign pages = site.pages      sort: “date”      reverse %}        {% for item in pages %}    {% if item.type == &quot;tutorial&quot; %}      {% include card.html title=item.title authors=item.authors date=item.date tags=item.tags summary=item.summary url=item.url %}        {% endif %}  {% endfor %}",
      "snippet"     : "{% include tags.html type=tutorial %}            {% assign pages = site.pages      sort: date      reverse %}        {% for item in pages %}    {% if item.type == &quot;tutorial&quot; %}      {% in..."
    } ,
  
    
    
    {
      "title"    : "White Papers",
      "authors" : "",
      "tags"     : "navigation bar",
      "url"      : "/openDANES/nav/white-papers.html",
      "date"     : "",
      "type"     : "nav",
      "summary"     : "",
      "content"     : "{% include tags.html type=”white-paper” %}            {% assign pages = site.pages      sort: “date”      reverse %}        {% for item in pages %}    {% if item.type == &quot;white-paper&quot; %}      {% include card.html title=item.title authors=item.authors date=item.date tags=item.tags summary=item.summary url=item.url %}        {% endif %}  {% endfor %}",
      "snippet"     : "{% include tags.html type=white-paper %}            {% assign pages = site.pages      sort: date      reverse %}        {% for item in pages %}    {% if item.type == &quot;white-paper&quot; %}     ..."
    } 
  
]